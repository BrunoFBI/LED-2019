
package les12015.core.impl.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import les12015.dominio.Cliente;
import les12015.dominio.EntidadeDominio;

public class ClienteDAO extends AbstractJdbcDAO {
	public ClienteDAO() {
		super("Cliente", "Id_cliente");		
	}
	public void salvar(EntidadeDominio entidade) {
		openConnection();
		PreparedStatement pst=null;
		Cliente cliente = (Cliente)entidade;
		
		
		try {
			connection.setAutoCommit(false);			
					
			StringBuilder sql = new StringBuilder();
			sql.append("INSERT INTO Cliente(nome, genero, senha, cpf, email, ");
			sql.append("dt_cadastro, dt_Nasc) VALUES (?,?,?,?,?,sysdate(),dt_Cadastro)");		
					
			pst = connection.prepareStatement(sql.toString());
			pst.setString(1, cliente.getNome());
			pst.setString(2, cliente.getGenero());
			pst.setString(3,cliente.getSenha());
			pst.setString(4, cliente.getCpf());
			pst.setString(5, cliente.getEmail());
			pst.setDate(5, cliente.getDtNasc(), cal);
			
			pst.executeUpdate();			
			connection.commit();		
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();			
		}finally{
			try {
				pst.close();
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}		

	}
	/** 
	 * TODO Descrição do Método
	 * @param entidade
	 * @see fai.dao.IDAO#alterar(fai.domain.EntidadeDominio)
	 */
	@Override
	public void alterar(EntidadeDominio entidade) {
		openConnection();
		PreparedStatement pst=null;
		Cliente cliente = (Cliente)entidade;
		
		
		try {
			connection.setAutoCommit(false);			
					
			StringBuilder sql = new StringBuilder();
			sql.append("UPDATE Cliente(nome, cpf, ");
			sql.append("dt_cadastro) VALUES (?,?,sysdate())");		
					
			pst = connection.prepareStatement(sql.toString());
			pst.setString(1, cliente.getNome());
			pst.setString(2, cliente.getCpf());
			//pst.setDate(3, new Date(cliente.getDtCadastro().getTimeInMillis()), cliente.getDtCadastro());
			pst.executeUpdate();			
			connection.commit();		
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();			
		}finally{
			try {
				pst.close();
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}		

		
	}
	/** 
	 * TODO Descrição do Método
	 * @param entidade
	 * @return
	 * @see fai.dao.IDAO#consulta(fai.domain.EntidadeDominio)
	 */
	@Override
	public List<EntidadeDominio> consultar(EntidadeDominio entidade) {
			PreparedStatement pst = null;
			
			Cliente cliente = (Cliente)entidade;
			String sql=null;
			
			sql = "SELECT * FROM Cliente WHERE 1=1";
			
			if(cliente.getId() != null && cliente.getId() > 0) {
				sql+=" and Id_cliente = " + cliente.getId() ;
				
			}
			if(cliente.getNome() != null && cliente.getNome().trim()!="") {
				sql+=" and nome = '" + cliente.getNome() +"'";
			}
			
			if(cliente.getCpf()!= null && cliente.getCpf().trim()!="") {
				sql+=" and cpf = '" + cliente.getCpf() +"'";
			}
			
		try {
			openConnection();
			pst = connection.prepareStatement(sql);
			
			ResultSet rs = pst.executeQuery();
			List<EntidadeDominio> clientes = new ArrayList<EntidadeDominio>();
			while (rs.next()) {
				Cliente c = new Cliente();
				c.setId(rs.getInt("Id_cliente"));
				c.setNome(rs.getString("nome"));
				c.setCpf(rs.getString("CPF"));		
				Calendar dtCad = Calendar.getInstance();
				dtCad.setTime(rs.getDate("dt_Cadastro"));
				c.setDtCadastro(dtCad);
				clientes.add(c);
			}
			return clientes;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	

	

}
